---
- name: Update peers in config.toml file
  ansible.builtin.lineinfile:
    path: '{{ user_dir }}/{{ folder }}/config/config.toml'
    regexp: ^persistent_peers =
    line: persistent_peers = "{{ peers }}"
    state: present
  when: peers is defined

- name: Update seeds in config.toml file
  ansible.builtin.lineinfile:
    path: '{{ user_dir }}/{{ folder }}/config/config.toml'
    regexp: ^seeds =
    line: seeds = "{{ seeds }}"
    state: present
  when: seeds is defined

- name: Open p2p port
  become: true
  ansible.builtin.command: ufw allow {{ custom_port_prefix }}56/tcp
  register: output
  changed_when: output.rc != 0

- name: Create cosmovisor directories
  ansible.builtin.file:
    path: '{{ item }}'
    state: directory
    mode: '0755'
  with_items:
    - '{{ user_dir }}/{{ folder }}/cosmovisor/genesis/bin'
    - '{{ user_dir }}/{{ folder }}/cosmovisor/upgrades'

- name: Copy daemon file to cosmovisor
  ansible.builtin.copy:
    src: '{{ user_dir }}/bin/agoric'
    dest: '{{ user_dir }}/{{ folder }}/cosmovisor/genesis/bin'
    remote_src: true
    mode: '0755'

- name: Link daemon file to cosmovisor
  ansible.builtin.file:
    src: '{{ user_dir }}/{{ folder }}/bin/agd'
    dest: '{{ user_dir }}/{{ folder }}/cosmovisor/genesis/bin/agd'
    state: link
    mode: '0755'

- name: Copy service file
  become: true
  ansible.builtin.template:
    src: cosmovisor.service.j2
    dest: /etc/systemd/system/{{ network }}.service
    owner: root
    group: root
    mode: '0644'

- name: Create data dir
  ansible.builtin.file:
    path: '{{ user_dir }}/{{ folder }}/data'
    state: directory
    mode: '0755'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'

- name: Test
  ansible.builtin.shell: |
    set -o pipefail && echo "{{ keyring_pass }}" | agd keys list --keyring-backend file --keyring-dir ./ -
  when: keyring_pass is defined
  register: test_output
  changed_when: test_output.rc != 0
  args:
    executable: /usr/bin/bash


- name: Start cosmovisor service
  become: true
  ansible.builtin.systemd:
    name: '{{ network }}'
    state: restarted
    daemon_reload: yes
    enabled: yes
